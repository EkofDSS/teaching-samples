@page "/actors"
@using project.ViewModels

@inject IActorService _actorService
@inject ICountryService _countryService
@inject IMessagingService _messagingService
@inject NavigationManager _navigationManager

@if (_actors == null)
{
    <p><em>Loading actors...</em></p>
}
else
{
    <div class="container">
        <h2 class="bg-primary text-white">All enlisted actors</h2>

        <div class="row">
            <div class="col">
                First name:
            </div>
            <div class="col">
                <input @bind="FirstName" />
            </div>
            <div class="col">
                Last name:
            </div>
            <div class="col">
                <input @bind="LastName" />
            </div>
            <div class="col">
                <select @onchange="ConutryChanged">
                    @foreach (var c in _countries)
                    {
                        <option value=@c.countryId>@c.countryName</option>
                    }
                </select>
            </div>
            <div class="col">
                <button type="button" class="btn btn-primary" @onclick="Add">Add</button>
            </div>
        </div>

        <ul class="actors">
            @foreach (var a in _actors)
            {
                <li>
                    <span @onclick="@(()=>OnSelect(a))">
                        <span class="badge">@a.id</span> @a.first_name &nbsp; @a.last_name
                        - @a.date_of_birth?.ToShortDateString() ( @a.country_code )
                    </span>
                    <button class="delete" @onclick="@(()=>Delete(a.id))">x</button>
                </li>
            }
        </ul>
    </div>
}

@code
{
    private List<ActorCountryDto> _actors;
    private List<Country> _countries;

    private long _selectedCountryId;


    private string FirstName { get; set; } = "";
    private string LastName { get; set; } = "";
    private string Country { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        _countries = await _countryService.GetCountries();
        _actors = await _actorService.GetActorsWithCountry();
    }

    private async Task OnSelect(ActorCountryDto actor)
    {
        await _messagingService.Add("ActorComponent::Actor selected: " + actor.first_name + " "
        + actor.last_name);
        _navigationManager.NavigateTo("/actordetail/" + actor.id);
    }

    private async Task Add()
    {
        await _actorService.Add(FirstName, LastName, _selectedCountryId);
        _actors = await _actorService.GetActorsWithCountry();
        await _messagingService.Add("ActorComponent::Actor added: "
            + FirstName + " " + LastName);
    }

    private async Task Delete(long actorId)
    {
        await _actorService.Delete(actorId);
        _actors = await _actorService.GetActorsWithCountry();
        await _messagingService.Add("ActorComponent::Actor deleted: ");
    }

    private async Task ConutryChanged(ChangeEventArgs e)
    {
        _selectedCountryId = long.Parse(e.Value.ToString());
        await _messagingService.Add("ActorComponent::Country selected: "
        + e.Value.ToString());
    }

}
