@page "/actordetail/{Id}"

@inject IActorService _actorService
@inject IMessagingService _messagingService

@if (@SelectedActor != null)
{
    @if (@_currentMode == @Mode.View)
    {
        <div class="row border my-3 p-3">
            <h2 class="text-success">
                Details for <span class="bg-dark text-success"> @SelectedActor.firstName @SelectedActor.lastName.ToUpper()</span>
            </h2>
        </div>
        <div class="row my-3 p-3">
            <div class="col text-success">
                id:
            </div>
            <div class="col bg-dark text-white">
                @SelectedActor.actorId
            </div>
        </div>
        <div class="row my-3 p-3">
            <div class="text-success">
                first name:
            </div>
            <div class="col bg-dark text-white">@SelectedActor.firstName</div>
        </div>
        <div class="row my-3 p-3">
            <div class="text-success">
                last name:
            </div>
            <div class="col bg-dark text-white">@SelectedActor.lastName</div>
        </div>
        <div class="row my-3 p-3">
            <div class="text-success">
                country code:
            </div>
            <div class="col bg-dark text-white">@SelectedActor.countryCode</div>
        </div>
        <div class="row my-3 p-3">
            <div class="text-success">
                date of birth:
            </div>
            <div class="col bg-dark text-white">
                @SelectedActor.dateOfBirth?.ToString("MM/dd/yyyy")
            </div>
        </div>
        <div class="row my-3 p-3">
            <button type="button" class="btn btn-primary" @onclick="Edit"> Edit</button>
        </div>
    }
    @if (@_currentMode == @Mode.Edit)
    {
        <div class="row my-3 p-3">
            <h2>Edit data for @SelectedActor.firstName @SelectedActor.lastName.ToUpper()</h2>
        </div>
        <div class="row my-3 p-3">
            <div class="col">
                <label class="text-danger"> first name: </label>
            </div>
            <div class="col">
                <input class="text-success" @bind="SelectedActor.firstName" placeholder="FirstName">
            </div>
        </div>
        <div class="row my-3 p-3">
            <div class="col">
                <label class="text-danger"> last name: </label>
            </div>
            <div class="col">
                <input class="text-success" @bind="SelectedActor.lastName" placeholder="LastName">
            </div>
        </div>
        <div class="row my-3 p-3">
            <div class="col">
                <label class="text-danger"> country: </label>
            </div>
            <div class="col">
                <input class="text-success" @bind="SelectedActor.countryCode" placeholder="CountryCode">
            </div>
        </div>
        <div class="row my-3 p-3">
            <div class="col">
                <label class="text-danger"> date of birth: </label>
            </div>
            <div class="col">
                <input class="text-success" type="date" @bind="SelectedActor.dateOfBirth" placeholder="DateOfBirth">
            </div>
        </div>
        <div class="row my-3 p-3">
            <div class="col align-self-lg-center">
                <button type="button" class="btn btn-primary" @onclick="Save"> Save</button>
                <button type="button" class="btn btn-primary" @onclick="Cancel"> Cancel</button>
            </div>
        </div>
    }
}

@code
{
    enum Mode { View, Edit };

    Mode _currentMode = Mode.View;
    public Actor SelectedActor { get; set; }

    [Parameter]
    public string Id { get; set; }

    private List<Actor> _actors;
    protected override async Task OnInitializedAsync()
    {
        _actors = await _actorService.GetActors();
        if (_actors == null)
            return;
        if (_actors.Count(x => x.actorId == long.Parse(Id)) == 0)
            return;
        SelectedActor = _actors.First(x => x.actorId == long.Parse(Id));
    }

    private async Task Edit()
    {
        _currentMode = Mode.Edit;
        await _messagingService.Add("ActorDetail::Actor edited: " + SelectedActor.firstName + " "
        + SelectedActor.lastName);
    }

    private async Task Save()
    {
        _currentMode = Mode.View;
        await _actorService.Update(SelectedActor);
        await _messagingService.Add("ActorDetail::Actor saved: " + SelectedActor.firstName + " "
        + SelectedActor.lastName);
    }

    private async Task Cancel()
    {
        _currentMode = Mode.View;
        await _messagingService.Add("ActorDetail::Actor changes canceled: " + SelectedActor.firstName + " "
        + SelectedActor.lastName);
    }

}
