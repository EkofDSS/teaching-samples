@page "/countries"

@inject ICountryService _countryService
@inject IMessagingService _messagingService
@inject NavigationManager _navigationManager

@if (_countries == null)
{
    <p><em>Loading countires...</em></p>
}
else
{
    <div class="container">
        <h2 class="bg-primary text-white">All countries</h2>
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th>Country Name</th>
                    <th colspan="2">Country code</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <input @bind="CountryName" />
                    </td>
                    <td>
                        <input @bind="CountryCode" />
                    </td>
                    <td class="text-center">
                        <button class="btn btn-primary" @onclick="Add"> Add</button>
                    </td>
                </tr>
                @foreach (var c in _countries)
                {
                    <tr>
                        <td>
                            <span @onclick="@(()=>OnSelect(c))">
                            <span class="badge">@c.countryId</span> @c.countryName </span>
                        </td>
                        <td>
                            <span @onclick="@(()=>OnSelect(c))"> @c.countryCode </span>
                        </td>
                        <td class="text-center">
                            <button class="btn btn-primary" @onclick="@(()=>Delete(c))">x</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
<CountryDetail></CountryDetail>

@code
{
    private List<Country> _countries;

    private Country _selectedCountry;

    private string CountryName { get; set; } = "";
    private string CountryCode { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        _countries = await _countryService.GetCountries();
    }

    private async Task OnSelect(Country country)
    {
        await _messagingService.Add("Country selected: " + country.countryId + " "
        + country.countryName);
        _navigationManager.NavigateTo("countrydetail/" + country.countryId);
    }

    private async Task Add()
    {
        await _countryService.Add(CountryName, CountryCode);
        _countries = await _countryService.GetCountries();
        await _messagingService.Add("Country added: "
        + CountryName + " " + CountryCode);
    }

    private async Task Delete(Country country)
    {
        await _countryService.Delete(country.countryId);
        _countries = await _countryService.GetCountries();
        await _messagingService.Add("Country deleted: " + country.countryId + " "
        + country.countryName + " " + country.countryCode);
    }

    private async Task ConutryChanged(ChangeEventArgs e)
    {
        List<Country> countries = await _countryService.GetCountries();
        _selectedCountry = countries
            .Where(x => x.countryId == (long)e.Value)
            .FirstOrDefault();
        await _messagingService.Add("Country id selected: " + e.Value);
    }

}
